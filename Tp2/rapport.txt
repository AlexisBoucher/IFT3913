Alexis Boucher 20217120
Marguerite Mireille Camara 20143122

Lien GitHub:
https://github.com/AlexisBoucher/IFT3913


Tâche 1 : Plan GQM

Goal : 
Analyser la dernière version stable du code de la branche master du JFreeChart pour évaluer
sa facilité d'analyse du point de vue du chef du projet.

Question :
Q1 : Est-ce qu'il y a assez de tests?
Q2 : Est-ce que les tests sont à jour avec le reste du code?
Q3 : Est-ce que les tests sont trop complexes?
Q4 : Est-ce que les tests sont suffisamment documentés?

Metriques:

Question 1 :

TPC (tests par classe):
Nous permettra de calculer le nombre de tests dans chaque fichier test,
elle nous sera utile pour evaluer la quantité des tests effectué. Si TPC est 
relativement faible par rapport à la taille du projet, cela peut indiquer des 
lacunes dans les tests, ce qui signifie qu'il pourrait y avoir des parties du code
non couvertes par les tests. Pour le mesurer nous modifierons le programme tls que 
nous avons implémenté lors du tp1 pour nous donner en plus le tassert moyen, ce qui
est équivalent à Tpc.

TPP(tests par package) :
Nous allons collecter le nombre de test présent dans chaque package que nous, 
avons, nous évalurons la moyenne de tout les TPPs. Un seuil pour 
le nombre de test par package est fixé sur la base de la complexité du projet,
une moyenne des TPPs en dessous du seuil sera un indice que le projet n'est pas
suffisament testé. Pour le mesurer nous modifierons le programme tls que 
nous avons implémenté lors du tp1.

PCC (Pourcentage code couvert): 
Mesure le pourcentage de ligne de code non testées dans chaque package.
Si un package a un pourcentage élevé de ligne de code non testées,
cela pourrait indiquer que ce package est insuffisamment testées.
Un seuil sera fixé, si le PCC est en dessous de ce seuil cela signifiera que le package 
concerné a besoin d'amélioration sur la couverture de ses tests. Pour le mesurer nous
utiliseront le plug-in pour projet maven jacoco.


Question2 : 

AGE (age d'un fichier): 
Nous permettra de déterminer si nos fichiers tests sont plus vieux 
que les fichiers des classes qu'ils testent. Un seuil d'un certain nombre de jour
est fixé, si la moyenne des fichiers tests sont en dessous du seuil cela signifiera 
que la majorité des tests sont plus vieux que les fichier qu'ils tests, et donc ne 
seront pas considéré à jour. Nous ferons un implémentation de age pour mesurer celui-ci.

NCH : 
Calcule le nombre de commits dans l'historique d'une classe, pour chaque classe de test 
cette metrique compte le nombre de commits associés à cette classe depuis le début de 
son historique. Nous comparerons les valeurs de NCH des classes de tests à celles du
reste du code. Si le NCH des classes de tests est significativement inférieur à celui 
du code source principal, cela peut indiquer que les tests ne sont pas mis à jour aussi
fréquemment que le code source, ce qui pourrait indiquer que le code n'est pas à jour.

PCC (Pourcentage code couvert):  
Mesure le pourcentage de ligne de code non-testé. Un pourcentage élevé nous indiquera 
que beaucoup de code n'est pas testé, ce qui pourrait suggérer un ajout de lignes de code
sans ajout de tests pour les vérifiés, ce qui peut nous indiquer que les tests ne sont plus à jours

Question3: 

Ratio taille code / taille test : 
Mesure la taille du code de test en comptant le nombre total de lignes de code dans les
classes tests. On mesurera la taille du code source en comptant le nombre total de lignes
de code dans le code que nous testons. On fera ensuite le ration Ratio taille code / taille test.
Des seuils appropriés en fonction de JFreeChart sont fixés. Un ratio faible peut 
indiquer que les tests sont proportionnellement plus complexes que le code de la classe
testée. Un ratio élevé, indiquera que les tests sont relativement plus simples que le code source.
Nous utiliserons l'application cloc pour le mesurer. 

NCLOC : 
Calcule le nombre de lignes de code non-vides qui ne sont pas des commentaires.
Un NCLOC élevé dans les fichiers tests par rapport à la taille de JFreeChart
pourrait indiquer que les tests sont trop complexes. Nous utiliserons l'application 
cloc pour le mesurer. 

TCMP : 
Mesure ratio entre le nombre de ligne de code et le nombre de tests dans une classe (TLOC/TASSERT).
Nous évalurons le TCMP moyen de toutes les classe de test de jfreechart. Un ratio élevé
nous indiquera qu'en moyenne les tests sont trop complexe et un ratio faible nous indiquera que
les tests ne sont pas trop complexe. Nous modifierons le programme tls pour obtenir TCMP moyen.

Question4: 

CLOC :
Donnera le nombre de lignes de commentaires. Un seuil sera fixé et si le nombre
de commentaire est en dessous de ce seuil, ça nous indiquera que le projet n'est
pas assé documenté. Nous utiliserons le programme cloc pour mesurer CLOC.

DC (densité de commentaires) : 
Un nombre de commentaires important dans une classe test peut être indicateur 
de documentation, mais cette métrique ne suffit pas forcement. 
Nous fixerons un seuil, une DC élevée est un signe que les tests sont potentiellement
bien documentés, tandis qu'une DC faible peut indiquer que les tests nécessitent une 
amélioration de la documentation. Cette métrique sera calculer à l'aide du programme cloc.


"Reste a faire :
- ajouter la facon d executer chaque metrique dans la documentation.
- Fixer les seuils (sera peut etre plus pertinent de fixer quand on testera)
-Ameliorer et approfondir l analyse pendant l implementation"